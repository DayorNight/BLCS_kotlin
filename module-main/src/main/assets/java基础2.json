{
	"code": 200,
	"message": "",
	"body": [
		{
			"title": "JAVA基础",
			"problem": "接口和抽象类的区别是什么？",
			"answer": " 1.接口的方法默认是public,所有方法在接口中不能有实现（java8开始接口方法可以有默认实现），而抽象可以有非抽象的方法。\n2.接口中除了static、final变量，不能有其他变量，而抽象类中则不一定。\n3.一个类可以实现多个接口，但只能实现一个抽象类。接口自己本身可以通过extends关键字扩展多个接口。\n4.接口方法默认修饰符是public,抽象方法可以有public/protected和default这些修饰符（抽象方法就是为了被重写所以不能使用private关键字修饰）\n5.从设计层面来说，抽象是对类的抽象，是一种模板设计，而接口是对行为的抽象，是一种行为的规范。"
		},{
			"title": "JAVA基础",
			"problem": "成员变量与局部变量的区别有哪些？",
			"answer": "（1）从语法形式上看：成员变量是属于类的，而局部变量是在方法中定义的变量或是方法的参数；成员变量可以被public,private,static等修饰符所修饰，而局部变量不能被访问控制修饰符及static所修饰；但是，成员变量和局部变量都能被final所修饰。\n（2）从变量在内存中的存储方式来看：如果成员变量是使用static修饰的，那么这个成员变量是属于类的，如果没有使用static修饰，这个成员变量是属于实例的。对象存于堆内存，如果局部变量类型为基本数据类型，那么存储在栈内存，如果为引用数据类型，那存放的是指向堆内存对象的引用或者是指向常量池中你的地址。\n\t（3）从变量在内存中的生存时间上看：成员变量是对象的一部分，它随着对象的创建而存在，而局部变量随着方法的调用而自动消失。\n\t（4）成员变量如果没有被赋初值，则会自动以类型的默认值而复制，而局部变量则不会自动复制。"
		},{
			"title": "JAVA基础",
			"problem": "创建一个对象用什么运算符？对象实体与对象引用有何不同？",
			"answer": "new 运算符，new 创建对象实例，对象引用指向对象实例。一个对象引用可以指向0个或1个对象；一个对象可以有n个引用指向它。"
		},{
			"title": "JAVA基础",
			"problem": "什么是方法的返回值？返回值在类的方法里的作用是什么？",
			"answer": "方法的返回值是指我们获取到的某个方法体中的代码执行后产生的结果。返回值的作用：接收出结果，使得它可以用于其他的操作！"
		},{
			"title": "JAVA基础",
			"problem": "构造方法的作用？若没有声明构造方法，能正确执行吗？",
			"answer": "主要作用是完成对类对象的初始化工作。可以执行。因为一个类即使没有声明构造方法也会有默认的不带参数的构造方法。"
		},{
			"title": "JAVA基础",
			"problem": "构造方法有哪些特性？",
			"answer": "1.可重载，但不能重写2.初始化实例，生成类的对象时自动执行，无需调用3.没有返回值 4.不能被static修饰5.名字与类名相同"
		},{
			"title": "JAVA基础",
			"problem": "静态方法和实例方法有何不同？",
			"answer": "1.调用方式不同：在外部调用静态方法时，可以使用“类名.方法名”的方式，也可以使用“对象名。方法名”的方式。而实例方法只有后面这种方式。也就是说，调用静态方法可以无需创建对象。\n\t2.静态方法在访问本类的成员时，只允许访问静态成员，而不允许访问实例成员变量和实例方法；实例方法则无此限制。"
		},{
			"title": "JAVA基础",
			"problem": "对象的相等与指向他们的引用相等，两者有什么不同？",
			"answer": "对象的相等，比的是内存中存放的内容是否相等。而引用相等，比较的是他们指向的内存地址是否相等。"
		},{
			"title": "JAVA基础",
			"problem": "在调用子类构造方法之前会先调用父类没有参数的构造方法？",
			"answer": "帮助子类做初始化工作。"
		},{
			"title": "JAVA基础",
			"problem": "== 与 equals 的区别？",
			"answer": "（1）==：它的作用是判断两个对象的地址是不是相等。即判断两个对象是不是同一个对象。基本数据类型==比较的是值，引用数据类型==比较的是内存地址\n    （2）equals():它的作用也是判断两个对象是否相等。但他一般有两种使用情况：\n1：类没有覆盖equals()方法。则通过equals()比较该类的两个对象时，等价于通过 == 比较这两个对象。\n2：类覆盖了equals()方法。一般，我们都覆盖equals()方法来比较两个对象的内容是否相等；若他们的内容相等，则返回true。"
		},{
			"title": "JAVA基础",
			"problem": "hashCode与equals？",
			"answer": "（1）hashCode():作用是获取哈希码，也称为散列码；它实际上是返回一个int整数。这个哈希码的作用是确定该对象在哈希表中的索引位置。hashCode定义在JDK 的Object.java中，这就意味着java中的任何类都包含有hashCode函数。\n（2）为什么要有HashCode:hashCode在散列表中才有用，在其他情况下没用。在散列表中hashcode的作用是获取对象的散列码，进而确定该对象在散列表中的位置。散列表存储的是键值对\n\t\t（3）hashCode()与equals()的相关规定\n\t\t1.如果两个对象相等，则 hashCode一定也是相同\n\t\t2.两个对象相等，对两个对象分别调用equeals方法都返回true\n\t\t3.两个对象有相同的hashcode值，他们不一定是相等的\n\t\t4.因此，equals方法被覆盖过，则hashcode方法也必须被覆盖\n\t\t5.hashCode的默认行为是对堆上的对象产生独特值。如果没有重写hashcode,则该class的两个对象无论如何都不会相等。"
		},{
			"title": "JAVA基础",
			"problem": "为什么java中只有值传递？",
			"answer": "方法得到的是所有参数值的一个拷贝，也就是说，方法不能修改传递给它的任何参数变量的内容"
		},{
			"title": "JAVA基础",
			"problem": "简述线程、程序、进程的基本概念。以及他们之间关系？",
			"answer": "1.线程与进程相似，但线程是一个比进程更小的执行单位。一个进程在其执行的过程中可以产生多个线程。\n\t2.程序是含有指令和数据的文件，被存储在磁盘或其他的数据存储设备中，也就是说程序是静态的代码。\n\t3.进程是程序的一次执行过程，是系统运行程序的基本单位，因此进程是动态的。"
		},{
			"title": "JAVA基础",
			"problem": "public protect private friendly 区别？",
			"answer": "1.public表明该数据成员、成员函数是对所有用户开放的，所有用户都可以直接进行调用\n2.private表示私有，私有的意思就是除了class自己之外，任何人都不可以直接使用，私有财产神圣不可侵犯嘛，即便是子女，朋友，都不可以使用。\n3.protected对于子女、朋友来说，就是public的，可以自由使用，没有任何限制，而对于其他的外部class，protected就变成private。\n作用域\t  当前类\t   同个包  子孙类  其他包\npublic\t\t√ \t\t √\t\t√\t\t√\nprotected \t√\t\t √\t\t√\t\t×\nfriendly     √       √\t\t× \t\t×\nprivate      √       ×\t\t×\t\t×"
		},{
			"title": "JAVA基础",
			"problem": "java中异常处理？",
			"answer": "在java中，所有的异常都有一个共同的祖先Throwable类。Throwable类有两个重要的子类：Exception和Error。\n1.Error:是程序无法处理的错误，表示运行应用程序中较严重问题。大多数错误与代码编写者执行的操作无关，而表示代码运行时Jvm出现问题。当jvm不在有继续执行操作所需的内存资源时，将出现内存泄漏错误。\n2.Exception:是程序本身可以处理的异常。Exception类有一个重要的子类。RuntimeException:该异常由java虚拟机抛出。注意：异常和错误的区别：异常能被程序本身处理，错误是无法处理。"
		},{
			"title": "JAVA基础",
			"problem": "java序列化中如果有些字段不想进行序列化，怎么办？",
			"answer": "对于不想进行序列化的变量，使用transient关键字修饰，transient关键字的作用是：阻止实例中那些用此关键字修饰的变量序列化；当对象被反序列化时，被 transient 修饰的变量值不会被持久化和恢复。transient 只能修饰变量，不能修饰类和⽅法。"
		},{
			"title": "JAVA基础",
			"problem": "获取用键盘输入常用的两种方法？",
			"answer": "方法1：通过Scanner\t\t方法2：通过BufferedReader"
		},{
			"title": "JAVA基础",
			"problem": "java中IO流分为几种？",
			"answer": "1.按照流的流向分，可以分为输入流和输出流；\n\t2.按照操作单元划分，可以划分为字节流和字符流\n\t3.按照流的角色划分为节点流和处理流"
		},{
			"title": "JAVA基础",
			"problem": "既然有了字节流,为什么还要有字符流？",
			"answer": "字符流是由 Java 虚拟机将字节转换得到的，问题就出在这个过程还算是非常耗时，并且，如果我们不知道编码类型就很容易出现乱码问题。所以， I/O 流就⼲脆提供了一个直接操作字符的接⼝，方便我们平时对字符进行流操作。如果音频文件、图片等媒体文件用字节流比较好，如果涉及到字符的话使用字符流比较好。"
		},{
			"title": "JAVA基础",
			"problem": "深拷贝 vs 浅拷贝？",
			"answer": "浅拷贝：对基本数据类型进行值传递，对引用数据类型进行引用传递的拷贝，此为浅拷贝\n\t深拷贝：对基本数据类型进行值传递，对引用数据类型，创建一个新的对象，并复制其内容，此为深拷贝。"
		}
	]
}
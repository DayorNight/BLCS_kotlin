{
	"code": 200,
	"message": "",
	"body": [
		{	
			"title": "JAVA基础",
			"problem": "什么是面向过程？",
			"answer": "是分析出解决问题所需要的步骤,然后用函数把这些步骤一步一步实现,使用的时候一个一个依次调用就可以了。"
		},{
			"title": "JAVA基础",
			"problem": "什么是面向对象？",
			"answer": "是把构成问题事务分解成各个对象，建立对象的目的不是为了完成一个步骤，而是为了描述某个事物在整个解决问题的步骤中的行为。"
		},{
			"title": "JAVA基础",
			"problem": "面向对象和面向过程的区别？",
			"answer": "面向过程：面向过程性能比面向对象高。因为类调用时需要实例化，开销比较大。比较消耗资源（因为Java时半编译语言，最终的执行代码并不是可以直接被CPU执行的二进制机械码）。当性能是最重要的考量因素的时候，单机片，嵌入式开发，Linux/Unix采用面向过程开发。\n面向对象：面向对象易维护、易复用、易扩展。因为面向对象有封装、继承、多态性的特性。可以设计出低耦合的系统，使系统更加灵活、更加易于维护。性能比面向过程低。"
		},{
			"title": "JAVA基础",
			"problem": "Java语言有哪些特点？",
			"answer": "1.简单易学 2.面向对象 3.平台无关性 4.可靠性 5.安全性 6.支持网络编程并且很方便 7.编译与解释共存。"
		},{
			"title": "JAVA基础",
			"problem": "什么是jvm？",
			"answer": "jvm简称Java虚拟机是运行Java字节码的虚拟机。Jvm有针对不同系统的特定实现，目的是使用相同的字节码，会给出相同的结果。"
		},{
			"title": "JAVA基础",
			"problem": "什么是虚拟机？",
			"answer": "通过软件模拟的具有完整硬件系统功能，运行在一个完全隔离环境中的完整计算机系统。"
		},{
			"title": "JAVA基础",
			"problem": "什么是字节码？采用字节码有什么好处？",
			"answer": "Jvm可以理解的代码就叫做字节码（扩展名为.class的文件）。java语言通过字节码的方式，在一定程度上解决了传统解释型语言执行效率低的问题，同时又保留了解释型语言可移植的特点。所以Java程序运行时比较高效，而且，由于字节码并不针对一种特定的机器。因此，java程序无须重新编译便可在多种不同操作系统的计算上运行。"
		},{
			"title": "JAVA基础",
			"problem": "什么是JDK？",
			"answer": "JDK 是 java Development kit，是功能齐全的 Java SDK。拥有JRE所拥有的一切，还有编译器javac 和工具jdb。能够创建和编译程序。"
		},{
			"title": "JAVA基础",
			"problem": "什么是JRE？",
			"answer": "JRE是Java 运行时环境。是运行已编译java程序所需的所有内容的集合，包括Java虚拟机，java类库，java命令和其他的一些基础构件。"
		},{
			"title": "JAVA基础",
			"problem": "java和C++的区别？",
			"answer": "（1）都是面向对象的语言，都支持封装、继承和多态 \n（2）java不提供指针来直接访问内存，程序内存更加安全  \n（3）java的类是单继承的，C++支持多重继承  \n（4）java有自动内存管理机制，不需要程序员手动释放无用内存\n（5）在C语言中，字符串或字符数组最后都会有一个额外的字符‘\\0’来表示结束"
		},{
			"title": "JAVA基础",
			"problem": "java应用程序与小程序之间有哪些差别？",
			"answer": "应用程序是从主线程启动（也就是Main()方法）。小程序没有main()方法。主要是嵌在浏览器页面上运行。"
		},{
			"title": "JAVA基础",
			"problem": "字符型常量和字符串常量的区别？",
			"answer": "（1）形式上：字符常量是单引号引起的一个字符，字符串常量是双引号引起的若干个字符。\n\t（2）含以上：字符常量相当于一个整型值，可以参加表达是运算。字符串常量代表一个地址值\n\t（3）占内存大小：字符常量只占2个字节；字符串常量占若干个字节"
		},{
			"title": "JAVA基础",
			"problem": "构造器是否可被重写？",
			"answer": "不能被重写但可以重载，所以可以看到一个类中有多个构造函数。"
		},{
			"title": "JAVA基础",
			"problem": "重载与重写的区别？",
			"answer": "重载：发生在同一个类中，方法名必须相同，参数类型不同、个数不同、顺序不同、方法返回值和访问修饰符可以不同。\n重写：发生在运行期，是子类对父类的允许访问的方法的实现过程进行重新编写。（1）返回值类型、方法名、参数列表必须形同，抛出的异常范围小于等于父类，访问修饰符范围大于等于父类。（2）如果父类方法访问修饰符为private/final/static 则子类就不能重写该方法，但是被static修饰的方法能够被再次声明。（3）构造方法无法被重写。"
		},{
			"title": "JAVA基础",
			"problem": "java面向对象编程三大特性：封装 继承 多态？",
			"answer": "封装：把一个对象的属性私有化，同时提供一些可以被外界访问属性的方法，如果属性不想被外界访问，不必提供方法给外界访问。\n\t继承：继承是使用已存在的类的定义作为基础建立新类的技术，新类的定义可以增加新的数据或新的功能，也可以用父类的功能，但不能选择性的继承父类。1.子类拥有父类对象所有的属性和方法（包括私有属性和私有方法），但是父类中的私有属性和方法子类是无法访问，只是拥有。2.子类可以拥有自己属性和方法，子类可以对父类进行扩展3.子类可以用自己的方式实现父类的方法。\n\t多态：是指程序中定义的引用变量所指向的具体类型和通过该引用变量发出的方法调用在编程时并不确定，而是在程序运行期间才确定，即一个引用变量到底会指向哪个类的实例对象，该引用变量发出的方法调用到底是哪个类中实现的方法，必须在由程序运行期间才能决定。在Java中有两种形式可以实现多态：继承 和接口。"
		},{
			"title": "JAVA基础",
			"problem": "String StringBuffer和StringBuilder的区别？",
			"answer": "可变性：\n\t1.String类中使用final关键字修饰字符数组来保存字符串。所以String对象是不可变的。\n\t2.而StringBuilder与StringBuffer都继承自AbstractStringBuilder类，在AbstractStringBuilder中也是使用字符数组保存字符串，但是没有用final关键字修饰，所以这两种都是对象可变的。\n\t线程安全性：\n\t1.String中的对象是不可变的，也就可以理解为常量，线程安全。\n\t2.StringBuffer对方法加了同步锁或者对调用的方法加了同步锁，所以是线程安全的。\n\t3.StringBuilder并没有对方法进行加同步锁，所以是非线程安全的。\n\t性能：\n\t每次对String类型进行该变的时候，都会生成一个新的String对象，然后将指针指向新的String对象。StringBuffer每次都会对StringBuffer对象本身进行操作，而不是生成新的对象并改变对象的引用。\n\t相同情况下使用StringBuilder相比使用StringBuffer仅能获得10%-15%左右的性能提升，但却要冒多线程不安全的风险。\n\t总结：\n\t1.操作少量的数据：适用String\n\t2.单线程操作字符串缓冲区下操作大量数据：适用StringBuilder\n\t3.多线程操作字符串缓冲区下操作大量数据：适用StirngBuffer"
		},{
			"title": "JAVA基础",
			"problem": "自动装箱与拆箱？",
			"answer": "装箱：将基本类型用他们对应的引用类型包装起来；\n\t\t拆箱：将包装类型转换为基本数据类型；"
		},{
			"title": "JAVA基础",
			"problem": "在一个静态方法内调用一个非静态成员为什么是非法的？",
			"answer": "由于静态方法可以不通过对象进行调用，因此在静态方法里，不能调用其他非静态变量，也不可以访问非静态变量成员。"
		},{
			"title": "JAVA基础",
			"problem": "在java中定义一个不做事且没有参数的构造方法的作用？",
			"answer": "java程序在执行子类的构造方法之前，如果没有用super()来调用父类特定的构造方法。则会调用父类中没有参数的构造方法。因此，如果父类中只定义了有参数的构造方法，而在子类的构造方法中又没有用super()来调用父类中特定的构造方法，则编译将发生错误。因为Java程序在父类中找不到没有参数的构造方法可供执行。解决办法是在父类里加上一个不做事且没有参数的构造方法。"
		},{
			"title": "JAVA基础",
			"problem": "20.import java和javax有什么区别？",
			"answer": "刚开始的时候JavaAPI所必须的包是java开头的包，javax当时只是扩展API包来使用。然而随着时间的推移，javax逐渐地扩展成为javaAPI的组成部分。但是，将扩展从javax包移动到java包确实太麻烦了，最终会破坏一堆现有的代码。因此最终决定javax包将成为标准API的一部分。所以，实际上java和javax没有区别。"
		}
	]
}
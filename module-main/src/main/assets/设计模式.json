{
	"code": 200,
	"message": "",
	"body": [
		{	
			"title": "设计模式",
			"problem": "什么是设计模式？",
			"answer": "设计模式是一套被反复使用的、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了重用代码、让代码更容易被他人理解、保证代码可靠性。"
		},
		{	
			"title": "设计模式",
			"problem": "设计模式七大原则？",
			"answer": "1.单一职责原则\n2.开闭原则\n3.里氏代换原则\n4.依赖倒置原则\n5.接口隔离原则\n6.迪米特法则\n7.合成/聚合复用原则"
		},
		{	
			"title": "设计模式",
			"problem": "什么是单一职责？",
			"answer": "描述：将不同的职责分离到单独的类，每一个职责都是一个变化的中心\n定义：一个类应该有且只有一个变化的原因"
		},
		{	
			"title": "设计模式",
			"problem": "什么是开闭原则？",
			"answer": "描述：在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。简而言之，尽量在不修改原代码的情况下进行扩展\n定义：对扩展开放，对修改关闭"
		},
		{	
			"title": "设计模式",
			"problem": "什么是里氏代换原则？",
			"answer": "描述：是对开闭原则的补充。实现开闭原则的关键步骤就是抽象化，而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范\n定义：任何基类可以出现的地方，子类一定可以出现。只有当派生类可以替换掉基类，且软件单位的功能不受到影响时，基类才能真正被复用，而派生类也能够在基类的基础上增加新的行为"
		},
		{	
			"title": "设计模式",
			"problem": "什么是依赖倒置原则？",
			"answer": "描述：1、高层模块不应该依赖低层模块，两者都应该依赖其抽象；2、抽象不应该依赖细节;3、细节应该依赖抽象\n定义：针对接口编程，依赖于抽象而不依赖于具体"
		},
		{	
			"title": "设计模式",
			"problem": "什么是接口隔离原则？",
			"answer": "描述：客户端不应该依赖它不需要的接口；一个类对另一个类的依赖应该建立在最小的接口上。把一个复杂的接口拆分为独立的几个接口，客户端只需实现所需的接口就行\n定义：使用多个隔离的接口，比使用单个接口要好。可以降低类之间的耦合度"
		},
		{	
			"title": "设计模式",
			"problem": "什么是迪米特法则？",
			"answer": "描述：类与类之间的关系越密切，耦合度越大，当一个类发生改变时，对另一个类的影响也越大。需降低耦合采用迪米特法则\n定义：一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立"
		},
		{	
			"title": "设计模式",
			"problem": "什么是合成/聚合复用原则？",
			"answer": "描述：合成/聚合复用原则经常又叫做合成复用原则，要尽量使用合成/聚合，尽量不要使用继承\n定义：在一个新的对象里面使用一些已有的对象，使之成为新对象的一部分；新的对象通过向这些对象的委派达到复用已有功能的目的"
		},
		{	
			"title": "设计模式",
			"problem": "创建型模式有哪些？",
			"answer": "1.单例模式\n2.工厂方法模式\n3.抽象工厂模式\n4.原型模式\n5.建造者模式"
		},
		{	
			"title": "设计模式",
			"problem": "结构型模式有哪些？",
			"answer": "1.桥接模式\n2.代理模式\n3.适配器模式\n4.装饰器模式\n5.外观模式\n6.组合模式\n7.享元模式"
		},
		{	
			"title": "设计模式",
			"problem": "行为型模式有哪些？",
			"answer": "1.观察者模式\n2.解释器模式\n3.状态模式\n4.中介者模式\n5.访问者模式\n6.模板方法模式\n7.策略模式\n8.迭代器模式\n9.责任链模式\n10.命令模式\n11.备忘录模式"
		},
		{	
			"title": "设计模式",
			"problem": "什么是单例模式",
			"answer": "这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象\n意图：保证一个类仅有一个实例，并提供一个访问它的全局访问点\n主要解决：一个全局使用的类频繁地创建与销毁"
		},
		{	
			"title": "设计模式",
			"problem": "什么是工厂方法模式",
			"answer": "工厂方法模式又称工厂模式，通过定义工厂父类负责定义创建对象的公共接口，而子类则负责生成具体的对象。作用：将类的实例化（具体产品的创建）延迟到工厂类的子类（具体工厂）中完成，即由子类来决定应该实例化（创建）哪一个类\n意图：定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，工厂模式使其创建过程延迟到子类进行\n主要解决：主要解决接口选择的问题"
		},
		{	
			"title": "设计模式",
			"problem": "什么是抽象工厂模式",
			"answer": "抽象工厂模式是围绕一个超级工厂创建其他工厂。该超级工厂又称为其他工厂的工厂。在抽象工厂模式中，接口是负责创建一个相关对象的工厂，不需要显式指定它们的类。每个生成的工厂都能按照工厂模式提供对象\n意图：提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类\n主要解决：主要解决接口选择的问题"
		},
		{	
			"title": "设计模式",
			"problem": "什么是原型模式",
			"answer": "原型模式（Prototype Pattern）是用于创建重复的对象，同时又能保证性能。这种模式是实现了一个原型接口，该接口用于创建当前对象的克隆。当直接创建对象的代价比较大时，则采用这种模式。例如，一个对象需要在一个高代价的数据库操作之后被创建。我们可以缓存该对象，在下一个请求时返回它的克隆，在需要的时候更新数据库，以此来减少数据库调用\n意图：用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象\n主要解决：在运行期建立和删除原型"
		},
		{	
			"title": "设计模式",
			"problem": "什么是建造者模式",
			"answer": "建造者模式使用多个简单的对象一步一步构建成一个复杂的对象。一个 Builder 类会一步一步构造最终的对象。该 Builder 类是独立于其他对象的\n意图：将一个复杂的构建与其表示相分离，使得同样的构建过程可以创建不同的表示\n主要解决：主要解决在软件系统中，有时候面临着一个复杂对象的创建工作，其通常由各个部分的子对象用一定的算法构成；由于需求的变化，这个复杂对象的各个部分经常面临着剧烈的变化，但是将它们组合在一起的算法却相对稳定"
		},
		{	
			"title": "设计模式",
			"problem": "什么是桥接模式",
			"answer": "桥接是用于把抽象化与实现化解耦，使得二者可以独立变化。它通过提供抽象化和实现化之间的桥接结构，来实现二者的解耦\n这种模式涉及到一个作为桥接的接口，使得实体类的功能独立于接口实现类。这两种类型的类可被结构化改变而互不影响\n意图：将抽象部分与实现部分分离，使它们都可以独立的变化\n主要解决：在有多种可能会变化的情况下，用继承会造成类爆炸问题，扩展起来不灵活"
		},
		{	
			"title": "设计模式",
			"problem": "什么是代理模式",
			"answer": "在代理模式中，我们创建具有现有对象的对象，以便向外界提供功能接口。一个类代表另一个类的功能\n意图：为其他对象提供一种代理以控制对这个对象的访问\n主要解决：在直接访问对象时带来的问题，比如说：要访问的对象在远程的机器上。在面向对象系统中，有些对象由于某些原因（比如对象创建开销很大，或者某些操作需要安全控制，或者需要进程外的访问），直接访问会给使用者或者系统结构带来很多麻烦，我们可以在访问此对象时加上一个对此对象的访问层"
		},
		{	
			"title": "设计模式",
			"problem": "什么是适配器模式",
			"answer": "作为两个不兼容的接口之间的桥梁，它结合了两个独立接口的功能。这种模式涉及到一个单一的类，该类负责加入独立的或不兼容的接口功能\n意图：将一个类的接口转换成客户希望的另外一个接口。适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作\n主要解决：主要解决在软件系统中，常常要将一些现存的对象放到新的环境中，而新环境要求的接口是现对象不能满足的"
		},
		{	
			"title": "设计模式",
			"problem": "什么是装饰器模式",
			"answer": "创建了一个装饰类，用来包装原有的类，并在保持类方法签名完整性的前提下，提供了额外的功能。允许向一个现有的对象添加新的功能，同时又不改变其结构\n意图：动态地给一个对象添加一些额外的职责。就增加功能来说，装饰器模式相比生成子类更为灵活\n主要解决：一般的，我们为了扩展一个类经常使用继承方式实现，由于继承为类引入静态特征，并且随着扩展功能的增多，子类会很膨胀"
		},
		{	
			"title": "设计模式",
			"problem": "什么是外观模式",
			"answer": "隐藏系统的复杂性，并向客户端提供了一个客户端可以访问系统的接口。它向现有的系统添加一个接口，来隐藏系统的复杂性\n这种模式涉及到一个单一的类，该类提供了客户端请求的简化方法和对现有系统类方法的委托调用\n意图：为子系统中的一组接口提供一个一致的界面，外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用\n主要解决：降低访问复杂系统的内部子系统时的复杂度，简化客户端与之的接口"
		},
		{	
			"title": "设计模式",
			"problem": "什么是组合模式",
			"answer": "又叫部分整体模式，是用于把一组相似的对象当作一个单一的对象。组合模式依据树形结构来组合对象，用来表示部分以及整体层次。它创建了对象组的树形结构。这种模式创建了一个包含自己对象组的类。该类提供了修改相同对象组的方式\n意图：将对象组合成树形结构以表示部分-整体的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性\n主要解决：它在我们树型结构的问题中，模糊了简单元素和复杂元素的概念，客户程序可以像处理简单元素一样来处理复杂元素，从而使得客户程序与复杂元素的内部结构解耦"
		},
		{	
			"title": "设计模式",
			"problem": "什么是享元模式",
			"answer": "主要用于减少创建对象的数量，以减少内存占用和提高性能。它提供了减少对象数量从而改善应用所需的对象结构的方式\n意图：运用共享技术有效地支持大量细粒度的对象\n主要解决：在有大量对象时，有可能会造成内存溢出，我们把其中共同的部分抽象出来，如果有相同的业务请求，直接返回在内存中已有的对象，避免重新创建"
		},
		{	
			"title": "设计模式",
			"problem": "什么是观察者模式",
			"answer": "当对象间存在一对多关系时，则使用观察者模式。比如，当一个对象被修改时，则会自动通知依赖它的对象。观察者模式属于行为型模式\n意图：定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新\n主要解决：一个对象状态改变给其他对象通知的问题，而且要考虑到易用和低耦合，保证高度的协作"
		},
		{	
			"title": "设计模式",
			"problem": "什么是解释器模式",
			"answer": "提供了评估语言的语法或表达式的方式。这种模式实现了一个表达式接口，该接口解释一个特定的上下文。这种模式被用在 SQL 解析、符号处理引擎等\n意图：给定一个语言，定义它的文法表示，并定义一个解释器，这个解释器使用该标识来解释语言中的句子\n主要解决：对于一些固定文法构建一个解释句子的解释器"
		},
		{	
			"title": "设计模式",
			"problem": "什么是状态模式",
			"answer": "类的行为是基于它的状态改变的。在状态模式中，我们创建表示各种状态的对象和一个行为随着状态对象改变而改变的 context 对象\n意图：允许对象在内部状态发生改变时改变它的行为，对象看起来好像修改了它的类\n主要解决：对象的行为依赖于它的状态（属性），并且可以根据它的状态改变而改变它的相关行为"
		},
		{	
			"title": "设计模式",
			"problem": "什么是中介者模式",
			"answer": "用来降低多个对象和类之间的通信复杂性。这种模式提供了一个中介类，该类通常处理不同类之间的通信，并支持松耦合，使代码易于维护\n意图：用一个中介对象来封装一系列的对象交互，中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互\n主要解决：对象与对象之间存在大量的关联关系，这样势必会导致系统的结构变得很复杂，同时若一个对象发生改变，我们也需要跟踪与之相关联的对象，同时做出相应的处理"
		},
		{	
			"title": "设计模式",
			"problem": "什么是访问者模式",
			"answer": "在访问者模式中，我们使用了一个访问者类，它改变了元素类的执行算法。通过这种方式，元素的执行算法可以随着访问者改变而改变。根据模式，元素对象已接受访问者对象，这样访问者对象就可以处理元素对象上的操作\n意图：主要将数据结构与数据操作分离\n主要解决：稳定的数据结构和易变的操作耦合问题"
		},
		{	
			"title": "设计模式",
			"problem": "什么是模板方法模式",
			"answer": "在模板模式中，一个抽象类公开定义了执行它的方法的方式/模板。它的子类可以按需要重写方法实现，但调用将以抽象类中定义的方式进行\n意图：定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤\n主要解决：一些方法通用，却在每一个子类都重新写了这一方法"
		},
		{	
			"title": "设计模式",
			"problem": "什么是策略模式",
			"answer": "在策略模式中，一个类的行为或其算法可以在运行时更改。我们创建表示各种策略的对象和一个行为随着策略对象改变而改变的 context 对象。策略对象改变 context 对象的执行算法\n意图：定义一系列的算法,把它们一个个封装起来, 并且使它们可相互替换\n主要解决：在有多种算法相似的情况下，使用 if...else 所带来的复杂和难以维护"
		},
		{	
			"title": "设计模式",
			"problem": "什么是迭代器模式",
			"answer": "迭代器模式是 Java 和 .Net 编程环境中非常常用的设计模式。这种模式用于顺序访问集合对象的元素，不需要知道集合对象的底层表示\n意图：提供一种方法顺序访问一个聚合对象中各个元素, 而又无须暴露该对象的内部表示\n主要解决：不同的方式来遍历整个整合对象"
		},
		{	
			"title": "设计模式",
			"problem": "什么是责任链模式",
			"answer": "责任链模式为请求创建了一个接收者对象的链。这种模式给予请求的类型，对请求的发送者和接收者进行解耦。在这种模式中，通常每个接收者都包含对另一个接收者的引用。如果一个对象不能处理该请求，那么它会把相同的请求传给下一个接收者，依此类推\n意图：避免请求发送者与接收者耦合在一起，让多个对象都有可能接收请求，将这些对象连接成一条链，并且沿着这条链传递请求，直到有对象处理它为止\n主要解决：职责链上的处理者负责处理请求，客户只需要将请求发送到职责链上即可，无须关心请求的处理细节和请求的传递，所以职责链将请求的发送者和请求的处理者解耦了"
		},
		{	
			"title": "设计模式",
			"problem": "什么是命令模式",
			"answer": "命令模式是一种数据驱动的设计模式，请求以命令的形式包裹在对象中，并传给调用对象。调用对象寻找可以处理该命令的合适的对象，并把该命令传给相应的对象，该对象执行命令\n意图：将一个请求封装成一个对象，从而使您可以用不同的请求对客户进行参数化\n主要解决：在软件系统中，行为请求者与行为实现者通常是一种紧耦合的关系，但某些场合，比如需要对行为进行记录、撤销或重做、事务等处理时，这种无法抵御变化的紧耦合的设计就不太合适"
		},
		{	
			"title": "设计模式",
			"problem": "什么是备忘录模式",
			"answer": "备忘录模式保存一个对象的某个状态，以便在适当的时候恢复对象\n意图：在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态\n主要解决：所谓备忘录模式就是在不破坏封装的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，这样可以在以后将对象恢复到原先保存的状态"
		}
	]
}